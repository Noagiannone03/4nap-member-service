const nodemailer = require('nodemailer');

console.log('üîç Debug NodeMailer...\n');

// Test de configuration email
async function testEmailConfig() {
    console.log('1Ô∏è‚É£ V√©rification des variables d\'environnement...');
    
    const emailUser = process.env.EMAIL_USER || 'NON_DEFINI';
    const emailPass = process.env.EMAIL_PASS || 'NON_DEFINI';
    
    console.log('üìß EMAIL_USER:', emailUser);
    console.log('üîë EMAIL_PASS:', emailPass ? '***DEFINI***' : 'NON_DEFINI');
    
    if (emailUser === 'NON_DEFINI' || emailPass === 'NON_DEFINI') {
        console.log('‚ùå Variables d\'environnement manquantes !');
        return;
    }
    
    console.log('\n2Ô∏è‚É£ Test de connexion transporter...');
    
    // Diff√©rents providers √† tester
    const providers = [
        {
            name: 'Gmail',
            config: {
                service: 'gmail',
                auth: { user: emailUser, pass: emailPass }
            }
        },
        {
            name: 'Outlook',
            config: {
                service: 'hotmail',
                auth: { user: emailUser, pass: emailPass }
            }
        },
        {
            name: 'SMTP Custom',
            config: {
                host: 'smtp.gmail.com',
                port: 587,
                secure: false,
                auth: { user: emailUser, pass: emailPass }
            }
        }
    ];
    
    for (const provider of providers) {
        try {
            console.log(`\nüß™ Test ${provider.name}...`);
            const transporter = nodemailer.createTransporter(provider.config);
            
            // V√©rifier la connexion
            await transporter.verify();
            console.log(`‚úÖ ${provider.name}: Connexion OK`);
            
            // Test d'envoi r√©el
            const info = await transporter.sendMail({
                from: emailUser,
                to: emailUser, // Envoi √† soi-m√™me pour test
                subject: `Test ${provider.name} - ${new Date().toLocaleTimeString()}`,
                text: `Email de test depuis ${provider.name}`,
                html: `<h3>‚úÖ Email de test depuis ${provider.name}</h3><p>Timestamp: ${new Date()}</p>`
            });
            
            console.log(`‚úÖ ${provider.name}: Email envoy√© !`);
            console.log(`üìß Message ID: ${info.messageId}`);
            
            // Si on arrive ici, c'est que √ßa marche !
            return transporter;
            
        } catch (error) {
            console.log(`‚ùå ${provider.name}: ${error.message}`);
            
            // Diagnostic d√©taill√© des erreurs courantes
            if (error.message.includes('Invalid login')) {
                console.log('üí° Suggestion: V√©rifier les credentials email');
            }
            if (error.message.includes('Less secure app')) {
                console.log('üí° Suggestion: Activer "Acc√®s moins s√©curis√©" sur Gmail');
            }
            if (error.message.includes('Application-specific password')) {
                console.log('üí° Suggestion: Utiliser un mot de passe d\'application Gmail');
            }
        }
    }
    
    console.log('\n‚ùå Aucun provider email ne fonctionne !');
}

// Test avec gestion d'erreur
testEmailConfig()
    .then(() => {
        console.log('\nüéâ Test termin√© !');
        process.exit(0);
    })
    .catch((error) => {
        console.error('\nüí• Erreur globale:', error);
        process.exit(1);
    }); 